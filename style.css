:root {
    --website-background-light: #ffffff;
    --website-text-light: #333333;
    --website-background-dark: #333333;
    --website-text-dark: #ffffff;
    --button-background: #eaeaea;
    --button-text: #333333;
    --control-panel-bg-light: #f9f9f9;
    --control-panel-bg-dark: #2c2c2c;
    --control-border-light: #e0e0e0;
    --control-border-dark: #444444;
    --input-bg-light: #ffffff;
    --input-bg-dark: #3a3a3a;
    --input-border-light: #cccccc;
    --input-border-dark: #555555;
    --button-hover-bg-light: #dcdcdc;
    --button-hover-bg-dark: #555555;
    --section-padding: 15px;
    --control-spacing: 10px;
}

body {
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    background-color: var(--website-background-light);
    color: var(--website-text-light);
    transition: background-color 0.3s, color 0.3s;
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}

body.dark-mode {
    --button-background: #4f4f4f; /* Darker buttons for dark mode */
    --button-text: #e0e0e0;
    --button-hover-bg-dark: #666666;
    background-color: var(--website-background-dark);
    color: var(--website-text-dark);
}

header {
    padding: 20px;
    border-bottom: 1px solid var(--control-border-light);
    background-color: var(--control-panel-bg-light);
}

body.dark-mode header {
    border-bottom: 1px solid var(--control-border-dark);
    background-color: var(--control-panel-bg-dark);
}

header h1 {
    margin: 0 0 20px 0;
    text-align: center;
    font-size: 2em;
}

.controls {
    display: flex;
    flex-wrap: wrap;
    gap: var(--control-spacing);
    justify-content: center;
}

.controls section {
    padding: var(--section-padding);
    border: 1px solid var(--control-border-light);
    border-radius: 8px;
    background-color: var(--website-background-light); /* Sections stand out slightly from header bg */
    margin-bottom: var(--control-spacing); /* Ensure spacing when wrapped */
}

body.dark-mode .controls section {
    border-color: var(--control-border-dark);
    background-color: var(--website-background-dark);
}

.controls section h2 {
    margin-top: 0;
    margin-bottom: 15px;
    font-size: 1.2em;
    border-bottom: 1px solid var(--control-border-light);
    padding-bottom: 5px;
}

body.dark-mode .controls section h2 {
    border-bottom-color: var(--control-border-dark);
}

/* Generic styles for controls inside sections */
.controls label,
.controls input,
.controls select,
.controls button {
    display: block;
    margin-bottom: var(--control-spacing);
    width: 100%; /* Default to full width, can be adjusted */
    box-sizing: border-box;
}

.controls input[type="checkbox"] {
    width: auto; /* Checkboxes shouldn't be full width */
    margin-right: 5px; /* Space between checkbox and label text if label is not wrapping it */
}


.controls label {
    font-weight: bold;
    margin-bottom: 5px; /* Less space after label, more after input */
}

.controls input[type="number"],
.controls input[type="color"],
.controls select,
.controls button {
    padding: 10px;
    border: 1px solid var(--input-border-light);
    border-radius: 4px;
    background-color: var(--input-bg-light);
    color: var(--website-text-light);
}

body.dark-mode .controls input[type="number"],
body.dark-mode .controls input[type="color"],
body.dark-mode .controls select,
body.dark-mode .controls button {
    border-color: var(--input-border-dark);
    background-color: var(--input-bg-dark);
    color: var(--website-text-dark);
}

.controls button {
    background-color: var(--button-background);
    color: var(--button-text);
    cursor: pointer;
    transition: background-color 0.2s;
}

.controls button:hover {
    background-color: var(--button-hover-bg-light);
}

body.dark-mode .controls button:hover {
    background-color: var(--button-hover-bg-dark);
}


#theme-toggle { /* Already had specific ID styling, adapt it slightly */
    /* padding: 10px 15px; keep from .controls button */
    /* border: 1px solid var(--button-text); keep from .controls button */
    /* background-color: var(--button-background); keep from .controls button */
    /* color: var(--button-text); keep from .controls button */
    /* cursor: pointer; keep from .controls button */
}

/* Specific styles for dark mode button if needed */
body.dark-mode #theme-toggle {
    background-color: var(--website-text-dark); /* Using text color for bg */
    color: var(--website-background-dark); /* Using bg color for text */
    border-color: var(--website-background-dark);
}

body.dark-mode #theme-toggle:hover {
    background-color: #f0f0f0; /* Lighter hover for this specific inverted button */
}

/* Allow certain controls to not take full width */
.controls .control-group {
    display: flex;
    align-items: center; /* Vertically align label and input if they are side-by-side */
    gap: 8px; /* Space between items in the group */
    margin-bottom: var(--control-spacing);
}

.controls .control-group label {
    width: auto; /* Let label take its content width */
    margin-bottom: 0; /* Reset bottom margin as it's now part of a flex group */
    font-weight: normal; /* Making labels in groups not bold to save space / look cleaner */
}

.controls .control-group input,
.controls .control-group select {
    width: auto; /* Let input take its natural width or a specific size */
    flex-grow: 1; /* Allow input to grow if there's space */
    margin-bottom: 0; /* Reset bottom margin */
}

/* Specific small inputs */
.controls input[type="number"],
.controls input[type="color"] { /* Color picker usually has a fixed sensible size */
    max-width: 150px; /* Example: constrain width of number/color inputs */
}
.controls input[type="checkbox"] + label { /* For labels next to checkboxes */
    font-weight: normal;
    width: auto;
}


main {
    display: flex;
    padding: 20px;
    gap: 20px;
    flex-grow: 1; /* Main area takes remaining vertical space */
    /* height: calc(100vh - 200px); Removed this, flex-grow should handle it */
}

#code-input {
    width: 50%;
    /* height: 300px; Let flexbox control height */
    border: 1px solid var(--input-border-light);
    padding: 10px;
    font-family: monospace; /* Keep code-specific font */
    font-size: 14px; /* Keep code-specific font size */
    resize: none; /* Disable resize, let flexbox handle it */
    background-color: var(--input-bg-light);
    color: var(--website-text-light);
    box-sizing: border-box;
    height: 100%; /* Fill parent height in main */
}

#code-preview-container {
    width: 50%;
    /* height: 300px; Let flexbox control height */
    background-color: #f4f4f4; /* Default light background for preview, JS overrides this */
    border: 1px solid var(--input-border-light);
    padding: 10px; /* JS overrides this for padding control */
    overflow: auto; /* Add scrollbars if content overflows */
    white-space: pre-wrap; /* Preserve whitespace and wrap lines */
    box-sizing: border-box; /* Include padding and border in the element's total width and height */
    height: 100%; /* Fill parent height in main */
}

#code-output {
    /* font-family and font-size are controlled by JS */
    display: block; /* Ensure it takes up the pre's padding correctly */
    /* Default colors will be inherited or set by highlight.js theme */
}

body.dark-mode #code-input {
    background-color: var(--input-bg-dark);
    color: var(--website-text-dark);
    border-color: var(--input-border-dark);
}

body.dark-mode #code-preview-container {
    /* background-color is controlled by JS */
    background-color: #1e1e1e; /* Dark background for preview in dark mode */
    border-color: #555;
    color: #f1f1f1; /* Ensure text in preview is visible in dark mode */
}

.code-preview-shadow {
    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
}

/* Optional: Lighter shadow for dark mode if the above is too strong */
body.dark-mode .code-preview-shadow {
    box-shadow: 0 10px 20px rgba(255,255,255,0.07), 0 6px 6px rgba(255,255,255,0.1);
}
